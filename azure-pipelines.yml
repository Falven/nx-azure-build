trigger:
  - master

pool:
  vmImage: ubuntu-latest

variables:
  Pipeline.Cache: $(Pipeline.Workspace)/.yarn

jobs:
  - job: initial_setup
    displayName: Get affected and allocate commands.
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      IS_PR: $[eq(variables['Build.Reason'], 'PullRequest')]
      CACHE_RESTORED: false
    steps:
      - template: .azure-pipelines/steps/install-node-modules.yml
      - pwsh: Write-Output "##vso[task.setvariable variable=COMMANDS;isOutput=true]$(node ./tools/scripts/calculate-commands.js $(IS_PR))"
        name: setCommands
        displayName: Set commands
      - pwsh: Write-Output "$(setCommands.COMMANDS)"
        name: echoCommands
        displayName: Echo commands

  - job: lint1
    dependsOn: initial_setup
    condition: |
      and(
        succeeded(),
        not(contains(
          dependencies.initial_setup.outputs['setCommands.COMMANDS'],
          '"lint1":[]'
        ))
      )
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      COMMANDS: $[dependencies.initial_setup.outputs['setCommands.COMMANDS']]
    steps:
      - template: .azure-pipelines/install-node-modules.yml
      - pwsh: node ./tools/scripts/run-many.js '$(COMMANDS)' lint1 lint
        displayName: Lint affected

  - job: lint2
    dependsOn: initial_setup
    condition: |
      and(
        succeeded(),
        not(contains(
          dependencies.initial_setup.outputs['setCommands.COMMANDS'],
          '"lint2":[]'
        ))
      )
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      COMMANDS: $[dependencies.initial_setup.outputs['setCommands.COMMANDS']]
    steps:
      - template: .azure-pipelines/install-node-modules.yml
      - pwsh: node ./tools/scripts/run-many.js '$(COMMANDS)' lint2 lint
        displayName: Lint affected

  - job: lint3
    dependsOn: initial_setup
    condition: |
      and(
        succeeded(),
        not(contains(
          dependencies.initial_setup.outputs['setCommands.COMMANDS'],
          '"lint3":[]'
        ))
      )
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      COMMANDS: $[dependencies.initial_setup.outputs['setCommands.COMMANDS']]
    steps:
      - template: .azure-pipelines/install-node-modules.yml
      - script: node ./tools/scripts/run-many.js '$(COMMANDS)' lint3 lint
        displayName: Lint affected

  - job: test1
    dependsOn: initial_setup
    condition: |
      and(
        succeeded(),
        not(contains(
          dependencies.initial_setup.outputs['setCommands.COMMANDS'],
          '"test1":[]'
        ))
      )
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      COMMANDS: $[dependencies.initial_setup.outputs['setCommands.COMMANDS']]
    steps:
      - template: .azure-pipelines/install-node-modules.yml
      - script: node ./tools/scripts/run-many.js '$(COMMANDS)' test1 test
        displayName: Test affected

  - job: test2
    dependsOn: initial_setup
    condition: |
      and(
        succeeded(),
        not(contains(
          dependencies.initial_setup.outputs['setCommands.COMMANDS'],
          '"test2":[]'
        ))
      )
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      COMMANDS: $[dependencies.initial_setup.outputs['setCommands.COMMANDS']]
    steps:
      - template: .azure-pipelines/install-node-modules.yml
      - script: node ./tools/scripts/run-many.js '$(COMMANDS)' test2 test
        displayName: Test affected

  - job: test3
    dependsOn: initial_setup
    condition: |
      and(
        succeeded(),
        not(contains(
          dependencies.initial_setup.outputs['setCommands.COMMANDS'],
          '"test3":[]'
        ))
      )
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      COMMANDS: $[dependencies.initial_setup.outputs['setCommands.COMMANDS']]
    steps:
      - template: .azure-pipelines/install-node-modules.yml
      - script: node ./tools/scripts/run-many.js '$(COMMANDS)' test3 test
        displayName: Test affected

  - job: build1
    dependsOn: initial_setup
    condition: |
      and(
        succeeded(),
        not(contains(
          dependencies.initial_setup.outputs['setCommands.COMMANDS'],
          '"build1":[]'
        ))
      )
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      COMMANDS: $[ dependencies.initial_setup.outputs['setCommands.COMMANDS'] ]
    steps:
      - template: .azure-pipelines/install-node-modules.yml
      - script: node ./tools/scripts/run-many.js '$(COMMANDS)' build1 build`
        displayName: Build affected

  - job: build2
    dependsOn: initial_setup
    condition: |
      and(
        succeeded(),
        not(contains(
          dependencies.initial_setup.outputs['setCommands.COMMANDS'],
          '"build2":[]'
        ))
      )
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      COMMANDS: $[ dependencies.initial_setup.outputs['setCommands.COMMANDS'] ]
    steps:
      - template: .azure-pipelines/install-node-modules.yml
      - script: node ./tools/scripts/run-many.js '$(COMMANDS)' build2 build
        displayName: Build affected

  - job: build3
    dependsOn: initial_setup
    condition: |
      and(
        succeeded(),
        not(contains(
          dependencies.initial_setup.outputs['setCommands.COMMANDS'],
          '"build3":[]'
        ))
      )
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      COMMANDS: $[ dependencies.initial_setup.outputs['setCommands.COMMANDS'] ]
    steps:
      - template: .azure-pipelines/install-node-modules.yml
      - script: node ./tools/scripts/run-many.js '$(COMMANDS)' build3 build
        displayName: Build affected
